# This is the main desktop application release workflow for both nightly and beta/stable releases.

name: Build-Desktop-Release

on:
  workflow_dispatch:
    inputs:
      build-target:
        description: 'Build Target ("nightly"/"beta"/"non-release")'
        type: string
        required: true
        default: "beta"
      git-ref:
        description: "Release Git Ref(master)"
        required: true
        default: "master"
      is-draft:
        description: 'Draft Release? (Beta only, Nightly will always be a non-draft)'
        type: boolean
        required: true
        default: false
      is-pre-release:
        description: 'Pre Release? (labeled as "PreRelease")'
        type: boolean
        required: true
        default: true
  schedule: # Every workday at the 2 P.M. (UTC) we run a scheduled nightly build
    - cron: '0 0 */7 * *'

env:
  CLOJURE_VERSION: '1.10.1.763'
  NODE_VERSION: '16'

jobs:
  compile-cljs:
    runs-on: ubuntu-18.04
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: clone trilium
        uses: actions/checkout@v2
        with:
          repository: logseq/logseq
          path: logseq
       
      - name: use the latest tag
        run: |
          cd logseq
          git checkout $(git describe --tags $(git rev-list --tags --max-count=1))
      - name: move files to workspace
        run: mv -f logseq/* ./
        
      - name: Setup Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: patch
        run: python patch.py

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn cache directory
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 1.8

      - name: Cache clojure deps
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
          key: ${{ runner.os }}-clojure-lib-${{ hashFiles('**/deps.edn') }}

      - name: Setup clojure
        uses: DeLaGuardo/setup-clojure@3.5
        with:
          cli: ${{ env.CLOJURE_VERSION }}

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js "${{ github.event.inputs.build-target }}")
          echo ::set-output name=version::$pkgver

      - name: Update Nightly APP Version
        if: ${{ github.event.inputs.build-target == 'nightly' || github.event_name == 'schedule' }}
        run: |
          sed -i 's/defonce version ".*"/defonce version "${{ steps.ref.outputs.version }}"/g' src/main/frontend/version.cljs

      - name: Compile CLJS
        run: yarn install && gulp build && yarn cljs:release-electron

      - name: Update APP Version
        run: |
          sed -i 's/"version": "0.0.1"/"version": "${{ steps.ref.outputs.version }}"/g' ./package.json
        working-directory: ./static

      - name: Display Package.json
        run: cat ./package.json
        working-directory: ./static

      - name: Save VERSION file
        run: echo "${{ steps.ref.outputs.version }}" > ./VERSION
        working-directory: ./static

      - name: List Files
        run: ls -al
        working-directory: ./static

      - name: Cache Static File
        uses: actions/upload-artifact@v2
        with:
          name: static
          path: static

  build-linux:
    runs-on: ubuntu-18.04
    needs: [ compile-cljs ]
    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v2
        with:
          name: static
          path: static

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(cat ./static/VERSION)
          echo ::set-output name=version::$pkgver

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      # - name: Cache Node Modules
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       **/node_modules
      #     key: ${{ runner.os }}-node-modules

      - name: Build/Release Electron App
        run: yarn install && yarn electron:make
        working-directory: ./static

      - name: Save artifacts
        run: |
          mkdir -p builds
          # NOTE: save VERSION file to builds directory
          cp static/VERSION ./builds/VERSION
          mv static/out/make/*-*.AppImage ./builds/Logseq-linux-x64-${{ steps.ref.outputs.version }}.AppImage
          mv static/out/make/zip/linux/x64/*-linux-x64-*.zip ./builds/Logseq-linux-x64-${{ steps.ref.outputs.version }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: logseq-linux-builds
          path: builds

  build-windows:
    runs-on: windows-latest
    needs: [ compile-cljs ]
    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v2
        with:
          name: static
          path: static

      - name: Retrieve tag version
        id: ref
        run: |
          $env:PkgVer=$(cat ./static/VERSION)
          echo "::set-output name=version::$env:PkgVer"

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      # - name: Cache Node Modules
      #   uses: actions/cache@v2
      #   with:
      #    path: |
      #      **/node_modules
      #    key: ${{ runner.os }}-node-modules

      - name: Deps Electron app
        run: yarn install
        working-directory: ./static

      - name: Fix Deps Electron app
        run: yarn run postinstall
        working-directory: ./static/node_modules/dugite/

      - name: Build/Release Electron app
        run: yarn electron:make
        working-directory: ./static
        

      - name: Save Artifact
        run: |
          mkdir builds
          mv static\out\make\squirrel.windows\x64\*.exe builds\Logseq-win-x64-${{ steps.ref.outputs.version }}.exe

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: logseq-win64-builds
          path: builds


  nightly-release:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.build-target == 'nightly' }}
    needs: [ build-linux, build-windows ]
    runs-on: ubuntu-18.04
    steps:
      - name: Download The Linux Artifacts
        uses: actions/download-artifact@v2
        with:
          name: logseq-linux-builds
          path: ./

      - name: Download The Windows Artifact
        uses: actions/download-artifact@v2
        with:
          name: logseq-win64-builds
          path: ./


      - name: Generate SHA256 checksums
        run: |
          sha256sum *-win-* >> SHA256SUMS.txt
          sha256sum *-linux-* >> SHA256SUMS.txt
          cat SHA256SUMS.txt

      - name: List files
        run: ls -rl

      - name: Update Nightly Release
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          name: 'Desktop/Android APP Nightly Release $$'
          draft: false
          prerelease: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.is-pre-release) || (github.event_name == 'schedule')}}
          body: |
            This is a nightly release of the Logseq desktop app.
            It's unstable compared to the official releases, **use it with caution**!
          files: |
            ./SHA256SUMS.txt
            ./*.zip
            ./*.dmg
            ./*.exe
            ./*.AppImage
            ./*.apk

  release:
    # NOTE: For now, we only have beta channel to be released on Github
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.build-target == 'beta' }}
    needs: [ build-linux, build-windows ]
    runs-on: ubuntu-18.04
    steps:
      - name: Download The Linux Artifacts
        uses: actions/download-artifact@v2
        with:
          name: logseq-linux-builds
          path: ./

      - name: Download The Windows Artifact
        uses: actions/download-artifact@v2
        with:
          name: logseq-win64-builds
          path: ./

      - name: List files
        run: ls -rl

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(cat VERSION)
          echo ::set-output name=version::$pkgver

      - name: Generate SHA256 checksums
        run: |
          sha256sum *-win-* >> SHA256SUMS.txt
          sha256sum *-linux-* >> SHA256SUMS.txt
          cat SHA256SUMS.txt

      - name: Create Release Draft
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.ref.outputs.version }}
          name: Desktop/Android APP ${{ steps.ref.outputs.version }} (Beta Testing)
          body: "TODO: Fill this changelog. Sorry for the inconvenience!"
          draft: ${{ github.event.inputs.is-draft }}
          prerelease: ${{ github.event.inputs.is-pre-release }}
          files: |
            ./VERSION
            ./SHA256SUMS.txt
            ./*.zip
            ./*.dmg
            ./*.exe
            ./*.AppImage
            ./*.apk
